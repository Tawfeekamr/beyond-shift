generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String
  image         String?
  username      String
  email         String          @unique
  password      String
  role          UserRole
  teams         Team[]          @relation("TeamMembers")
  votes         Vote[]
  projects      Project[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastLogin     DateTime?
  isVerified    Boolean         @default(false) // Indicates if the user has been verified
  SprintSession SprintSession[]
  account       Account[]
  session       Session[]
}

model OTP {
  id        String    @id @default(uuid())
  code      String // The actual OTP code
  expiresAt DateTime // The expiration date for the OTP
  usedAt    DateTime? // The date the OTP was used, nullable if not used yet
  userId    String // The user associated with this OTP
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Team {
  id             String          @id @default(uuid())
  name           String
  members        User[]          @relation("TeamMembers")
  projects       Project[]
  retrospectives Retro[]
  sessions       SprintSession[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Project {
  id             String   @id @default(uuid())
  name           String
  admin          User     @relation(fields: [adminId], references: [id])
  teams          Team[]
  sprints        Sprint[]
  retrospectives Retro[]
  adminId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Sprint {
  id        String       @id @default(uuid())
  title     String
  startDate DateTime
  endDate   DateTime
  project   Project      @relation(fields: [projectId], references: [id])
  tickets   Ticket[]
  status    SprintStatus
  projectId String
}

model Ticket {
  id          String        @id @default(uuid())
  title       String
  description String
  severity    SeverityLevel
  priority    PriorityLevel
  sprint      Sprint        @relation(fields: [sprintId], references: [id])
  status      TicketStatus
  sprintId    String
}

model Retro {
  id        String   @id @default(uuid())
  title     String
  date      DateTime
  team      Team     @relation(fields: [teamId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  positives String[]
  negatives String[]
  actions   String[]
  teamId    String
  projectId String
}

model SprintSession {
  id          String       @id @default(uuid())
  title       String
  teamId      String
  team        Team         @relation(fields: [teamId], references: [id])
  creatorId   String
  moderatorId String
  stories     Story[]
  status      SessionState
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model Story {
  id            String        @id @default(uuid())
  title         String
  description   String?
  SprintSession SprintSession @relation(fields: [sessionId], references: [id])
  votes         Vote[]
  sessionId     String
}

model Vote {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  story   Story  @relation(fields: [storyId], references: [id])
  points  Int
  userId  String
  storyId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  MEMBER
  ADMIN
}

enum SprintStatus {
  PLANNING
  ACTIVE
  COMPLETED
}

enum TicketStatus {
  TO_DO
  IN_PROGRESS
  DONE
}

enum SeverityLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum PriorityLevel {
  URGENT
  HIGH
  MEDIUM
  LOW
}

enum SessionState {
  OPEN
  IN_PROGRESS
  CLOSED
}
